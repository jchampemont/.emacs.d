#+TITLE:    jchampemont's Emacs configuration
#+AUTHOR:   Jean Champ√©mont
#+KEYWORDS: emacs config
#+OPTIONS:  toc: 4 h:4 ':t
#+STARTUP:  showall

* About this file

This configuration is using [[http://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]] to implement [[http://en.wikipedia.org/wiki/Literate_programming][Literate Programming]].

(inspired by [[https://twitter.com/sachac][@sachac]]'s [[http://sach.ac/dotemacs][emacs configuration]].)

* Preparation
** Backtrace
Show a backtrace when error happens while loading this file.

#+begin_src emacs-lisp :tangle yes
(setq debug-on-error t)
#+end_src
** Server
Start the emacs server already. So even when the rest of the
configuration would fail, the server is running and =emacsclient= is
usable.

We also configure the server to raise frame on foreground when they
open.

#+begin_src emacs-lisp :tangle yes
  (server-start)
  (add-hook 'server-switch-hook #'raise-frame)
#+end_src
* Variables
#+begin_src emacs-lisp :tangle yes
;; global variables
(setq
 make-backup-files nil;; no backup files - I use git everywhere
 create-lockfiles nil;; will no create lock files
 scroll-error-top-bottom t;;scroll to the farthest possible position before signaling an error
 use-package-always-ensure t;;install package if not already present
 sentence-end-double-space nil;;end of sentence period should not be followed by two spaces
)

;; buffer local variables
(setq-default
 indent-tabs-mode nil;;don't use tabs for indentation
 tab-width 4;;one tab = 4 spaces
 c-basic-offset 4);;basic indentation in Cc Mode
#+end_src
* Package initialization
** Add package sources

Additional repositories for packages.

#+begin_src emacs-lisp :tangle yes
(require 'package)
(setq
 package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                    ("org" . "http://orgmode.org/elpa/")
                    ("melpa" . "http://melpa.org/packages/")
                    ("melpa-stable" . "http://stable.melpa.org/packages/"))
 package-archive-priorities '(("melpa-stable" . 1)))

(unless (and (boundp 'package-archive-contents) package-archive-contents)
  (package-initialize)
  (package-refresh-contents))
#+end_src
* Packages
** Misc
*** use-package
Use-package is a wrapper around the built-in package.el of emacs. It helps you
to tidy your emacs, by combining everything for one package.

#+begin_src emacs-lisp :tangle yes
(package-install 'use-package)

(require 'use-package)
#+end_src
*** package-utils
Provides various functions such as =package-utils-upgrade-all= and more... (all
prefixed by =package-utils-*=)

#+begin_src emacs-lisp :tangle yes
(use-package package-utils)
#+end_src
*** no-littering
Keeps =.emacs.d= clean

#+begin_src emacs-lisp :tangle yes
(use-package no-littering
  :ensure t
  :config
  (require 'recentf)
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory))
#+end_src
*** which-key
Displays available keybindings in popup.

#+begin_src emacs-lisp :tangle yes
(use-package which-key)
(which-key-mode)
#+end_src
** Usability
*** ivy
Ivy is a command completion engine.

#+begin_src emacs-lisp :tangle yes
(use-package ivy
  :init
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  :config
  (ivy-mode 1))
#+end_src
*** counsel
Enhances default emacs features with [[*ivy][ivy]] and remaps default emacs command to ivy
enhanced versions (=counsel-*=).

#+begin_src emacs-lisp :tangle yes
(use-package counsel
  :config
  (counsel-mode 1))
#+end_src
*** swiper
[[*ivy][ivy]]-backed isearch replacement

#+begin_src emacs-lisp :tangle yes
(use-package swiper
  :config
  (global-set-key "\C-s" 'swiper))
#+end_src
*** dashboard
An extensible emacs startup screen

#+begin_src emacs-lisp :tangle yes
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(setq dashboard-items '((recents  . 5)
                        (bookmarks . 3)
                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
(setq dashboard-startup-banner 'logo)
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
*** Spell checking
**** flyspell
Disable the default flyspell keybindings.

#+begin_src emacs-lisp :tangle yes
  (setq flyspell-use-meta-tab nil
        flyspell-auto-correct-binding (kbd ""))
#+end_src

For programming modes, enable =flyspell-prog-mode= for spell checking in
comments and strings.

#+begin_src emacs-lisp :tangle yes
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src
**** flyspell correct
Correcting words with flyspell using ivy interface.

#+begin_src emacs-lisp :tangle yes
  (use-package flyspell-correct-ivy
    :ensure t
    :bind (:map flyspell-mode-map
                ("C-;" . flyspell-correct-wrapper)))
#+end_src
**** guess language
#+begin_src emacs-lisp :tangle yes
  (use-package guess-language
    :ensure t
    :custom (guess-language-languages '(en fr)))
  (guess-language-mode 1)
#+end_src
** org mode
The built-in org-mode in Emacs is outdated, install a newer one.

+ =org-startup-indented= :: Activate =org-indent-mode= at buffer startup.

+ =org-archive-location= :: Archive items end up in the same file in the
  =archive/= subdir.

+ =org-archive-mark-done= :: Mark the item as done when it is archived.

+ =org-M-RET-may-split-line= :: When pressing =M-RET= do not split the text at
  point, but add an item after the current one.

+ =org-cycle-separator-lines= :: Make collapsed trees more compact by showing no
  empty lines in between.

#+begin_src emacs-lisp :tangle yes
  (use-package org
      :ensure org-plus-contrib
      :hook ((org-mode . auto-fill-mode)
             (org-mode . flyspell-mode)
             (org-mode . (lambda () (setq fill-column 80)))
             (org-mode . turn-on-auto-fill))
      :bind (:map global-map
                   ("C-c a" . org-agenda))
             (:map global-map
                   ("C-c l" . org-store-link))
             (:map org-mode-map
                   ("C-c C-l" . org-insert-link))
      :custom (org-log-done t)
              (org-startup-indented t)
              (org-archive-location "archive/$s::")
              (org-archive-mark-done t)
              (org-M-RET-may-split-line '((item . nil)))
              (org-cycle-separator-lines 0))
  (org-reload)
#+end_src
** Programming
*** projectile
Project interaction library

#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :custom (projectile-enable-caching t)
            (projectile-completion-system 'ivy)
            (projectile-enable-idle-timer nil)
            (projectile-mode-line-prefix "")
    :config (projectile-global-mode))
#+end_src
*** company mode
Comp(lete) any(thing) is a completion engine.

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :hook (after-init . global-company-mode)
    :custom (company-idle-delay 0))
#+end_src
*** popup imenu
Displays file summary

#+begin_src emacs-lisp :tangle yes
(use-package popup-imenu)
#+end_src
*** magit
Git frontend

#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :bind (:map global-map
                ("C-x g" . magit-status)
                ("C-x M-g" . magit-file-popup))
    :hook (git-commit-mode . flyspell-mode))
#+end_src
*** diff hl
Show the git status in the fringe.

#+begin_src emacs-lisp :tangle yes
  (use-package diff-hl
    :ensure t
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config (global-diff-hl-mode 1)
            (diff-hl-flydiff-mode 1))
#+end_src
*** git link
Add package to get the GitHub/Bitbucket/GitLab/... URL for the current buffer
location.

+ =git-link-use-commit= :: Use the latests commit's hash in the link instead of
  the branch name.

#+begin_src emacs-lisp :tangle yes
  (use-package git-link
    :ensure t
    :custom (git-link-use-commit nil))
#+end_src
*** highlight-indent-guides
Visually show the indentation levels.
#+begin_src emacs-lisp :tangle yes
(use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom (highlight-indent-guides-method 'character)
            (highlight-indent-guides-responsive 'top))
#+end_src
*** dtrt-indent
Guess the identation rules from the style in the current file.
#+begin_src emacs-lisp :tangle yes
(use-package dtrt-indent
    :ensure t
    :hook (c-mode-common . dtrt-indent-mode)
    :custom (dtrt-indent-verbosity 0))
#+end_src
*** syntactic close
Close any syntactic element (=)]}= etc.)

#+begin_src emacs-lisp :tangle yes
  (use-package syntactic-close
    :ensure t
    :bind (("]" . syntactic-close)))
#+end_src
** Syntax
*** markdown mode

#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode)
#+end_src
*** yaml mode

#+begin_src emacs-lisp :tangle yes
(use-package yaml-mode)
(add-to-list 'auto-mode-alist '("\\.sls\\'" . yaml-mode))
#+end_src
** Visual customization
*** solarized theme
Use solarized dark theme
#+begin_src emacs-lisp :tangle yes
(use-package solarized-theme)
(load-theme 'solarized-dark t)
#+end_src
*** page break lines
Displays horizontal lines instead of ^L (C-q C-l to insert such a line ; C-x [
and C-x ] to navigate back and forth.)

#+begin_src emacs-lisp :tangle yes
(use-package page-break-lines)
(global-page-break-lines-mode)
#+end_src
*** minions
Just hide all minor modes

#+begin_src emacs-lisp :tangle yes
(use-package minions
    :ensure t
    :custom (minions-direct '(projectile-mode))
    :config (minions-mode 1))
#+end_src
*** all the icons

#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
    :disabled
    :ensure t)
#+end_src
* Modes
** paren mode
Highlight matching parenthesis

#+begin_src emacs-lisp :tangle yes
;; paren-mode
(show-paren-mode 1)
(setq show-paren-mode t)
(setq show-paren-delay 0.5)
(setq show-paren-style 'expression)
#+end_src
** save place mode
Remember the last cursor position in emacs.

#+begin_src emacs-lisp :tangle yes
(require 'saveplace)
(save-place-mode 1)
#+end_src
* General customization
** Custom file
Use a custom file

#+begin_src emacs-lisp :tangle yes
(setq custom-file
    (no-littering-expand-etc-file-name "custom.el"))
(load-file custom-file)
#+end_src
** Keybindings

#+begin_src emacs-lisp :tangle yes
(global-unset-key (kbd "C-z")) ;; unset C-z (which is hidding emacs)
(global-set-key (kbd "C-x C-k k") 'kill-this-buffer)
#+end_src
** Visual
*** Remove tool bar and menu bar
#+begin_src emacs-lisp :tangle yes
(tool-bar-mode 0)
(menu-bar-mode 0)
#+end_src
*** Highlight line
Highlight the current line
#+begin_src emacs-lisp :tangle yes
(global-hl-line-mode 1)
#+end_src
*** Replace sound bell by visual bell
#+begin_src emacs-lisp :tangle yes
(defun mode-line-visual-bell ()
  (setq visible-bell nil)
  (setq ring-bell-function 'mode-line-visual-bell--flash))

(defun mode-line-visual-bell--flash ()
  (let ((frame (selected-frame)))
    (invert-face 'header-line frame)
    (invert-face 'header-line-highlight frame)
    (invert-face 'mode-line frame)
    (invert-face 'mode-line-inactive frame)
    (run-with-timer
     0.1 nil
     #'(lambda (frame)
         (invert-face 'header-line frame)
         (invert-face 'header-line-highlight frame)
         (invert-face 'mode-line frame)
         (invert-face 'mode-line-inactive frame))
     frame)))
(mode-line-visual-bell)
#+end_src
*** No startup screen
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-screen t)
#+end_src
*** Display column number in the mode line
#+begin_src emacs-lisp :tangle yes
(setq column-number-mode t)
#+end_src
*** New frame size
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist '(width . 120))
  (add-to-list 'default-frame-alist '(height . 50))
#+end_src
** Change "yes or no" to "y or n"
#+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Confirm kill Emacs
#+begin_src emacs-lisp :tangle yes
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src
** Encoding
#+begin_src emacs-lisp :tangle yes
(setq-default buffer-file-coding-system 'utf-8)
(setenv "LANG" "en_fr.UTF-8")
(prefer-coding-system 'utf-8)
#+end_src
** Trailing whitespace
Automatically remove trailing whitespace when saving a file.

#+begin_src emacs-lisp :tangle yes
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
* Disabled stuff
Stuff below is disabled (=:tangle no=).
** treemacs
File tree view

#+begin_src emacs-lisp :tangle no
(use-package treemacs)
(use-package treemacs-projectile)
#+end_src
** flycheck
Syntax checking

#+begin_src emacs-lisp :tangle no
(use-package flycheck)
#+end_src
** Java development

#+begin_src emacs-lisp :tangle no
(use-package lsp-mode)
(use-package company-lsp)
(push 'company-lsp company-backends)
(use-package lsp-ui)
(add-hook 'lsp-mode-hook 'lsp-ui-mode)
(use-package lsp-java :after lsp
  :init
  (setq lsp-java-save-action-organize-imports nil)
  :config (add-hook 'java-mode-hook 'lsp) (add-hook 'java-mode-hook 'flycheck-mode))
#+end_src
